interface ==[t](left: t, right: t): Bool
interface !=[t](left: t, right: t): Bool

interface <[t](left: t, right: t): Bool
interface >[t](left: t, right: t): Bool
interface <=[t](left: t, right: t): Bool
interface >=[t](left: t, right: t): Bool

interface +[t](left: t, right: t): t
interface -[t](left: t, right: t): t
interface -[t](number: t): t

interface *[t](left: t, right: t): t
interface /[t](left: t, right: t): t
interface %[t](left: t, right: t): t

builtin ==(left: Float64, right: Float64): Bool
builtin ==(left: Int64, right: Int64): Bool
builtin ==(left: Int32, right: Int32): Bool
builtin ==(left: Int8, right: Int8): Bool
builtin ==(left: Bool, right: Bool): Bool

builtin !=(left: Float64, right: Float64): Bool
builtin !=(left: Int64, right: Int64): Bool
builtin !=(left: Int32, right: Int32): Bool
builtin !=(left: Int8, right: Int8): Bool

builtin <(left: Float64, right: Float64): Bool
builtin <(left: Int64, right: Int64): Bool
builtin <(left: Int32, right: Int32): Bool
builtin <(left: Int8, right: Int8): Bool

builtin <=(left: Float64, right: Float64): Bool
builtin <=(left: Int64, right: Int64): Bool
builtin <=(left: Int32, right: Int32): Bool
builtin <=(left: Int8, right: Int8): Bool

builtin >(left: Float64, right: Float64): Bool
builtin >(left: Int64, right: Int64): Bool
builtin >(left: Int32, right: Int32): Bool
builtin >(left: Int8, right: Int8): Bool

builtin >=(left: Float64, right: Float64): Bool
builtin >=(left: Int64, right: Int64): Bool
builtin >=(left: Int32, right: Int32): Bool
builtin >=(left: Int8, right: Int8): Bool

builtin +(left: Float64, right: Float64): Float64
builtin +(left: Int64, right: Int64): Int64
builtin +(left: Int32, right: Int32): Int32
builtin +(left: Int8, right: Int8): Int8

builtin -(left: Float64, right: Float64): Float64
builtin -(left: Int64, right: Int64): Int64
builtin -(left: Int32, right: Int32): Int32
builtin -(left: Int8, right: Int8): Int8

builtin -(number: Float64): Float64
builtin -(number: Int64): Int64
builtin -(number: Int32): Int32
builtin -(number: Int8): Int8

builtin *(left: Float64, right: Float64): Float64
builtin *(left: Int64, right: Int64): Int64
builtin *(left: Int32, right: Int32): Int32
builtin *(left: Int8, right: Int8): Int8

builtin /(left: Float64, right: Float64): Float64
builtin /(left: Int64, right: Int64): Int64
builtin /(left: Int32, right: Int32): Int32
builtin /(left: Int8, right: Int8): Int8

builtin %(left: Float64, right: Float64): Float64
builtin %(left: Int64, right: Int64): Int64
builtin %(left: Int32, right: Int32): Int32
builtin %(left: Int8, right: Int8): Int8

builtin not(boolean: Bool): Bool
builtin and(left: Bool, right: Bool): Bool
builtin or(left: Bool, right: Bool): Bool

builtin [][t](array: Array[t], index: Int64): t
builtin [][t](mut array: Array[t], index: Int64): mut t
builtin size[t](array: Array[t]): Int64

interface printWithoutLineEnding[t](object: t): None

extern printf(format: String, ...): Int32

function print[t](value: t): None
    printWithoutLineEnding(value)
    _ = printf("\n")

function printWithoutLineEnding(value: Float64): None
    _ = printf("%g", value)

function printWithoutLineEnding(value: Int64): None
    _ = printf("%d", value)

function printWithoutLineEnding(value: Int32): None
    _ = printf("%d", value)

function printWithoutLineEnding(value: Int8): None
    _ = printf("%d", value)

function printWithoutLineEnding(value: Bool): None
    if value _ = printf("true")
    else     _ = printf("false")

function printWithoutLineEnding(value: String): None
    _ = printf(value)

function printWithoutLineEnding[t](value: Array[t]): None
    _ = printf("[")
    i = 1
    while i <= size(value)
        printWithoutLineEnding(value[i])
        if not i == size(value)
            _ = printf(", ")
        i := i + 1
    _ = printf("]")

function printWithoutLineEnding[t: type](struct: t): None
    printStruct(struct)

builtin printStruct[t: type](struct: t): None