interface equal[t](left: t, right: t): Bool
interface notEqual[t](left: t, right: t): Bool

interface less[t](left: t, right: t): Bool
interface greater[t](left: t, right: t): Bool
interface lessEqual[t](left: t, right: t): Bool
interface greaterEqual[t](left: t, right: t): Bool

interface add[t](left: t, right: t): t
interface subtract[t](left: t, right: t): t
interface negate[t](number: t): t

interface multiply[t](left: t, right: t): t
interface divide[t](left: t, right: t): t
interface modulo[t](left: t, right: t): t

builtin equal(left: Float64, right: Float64): Bool
builtin equal(left: Int64, right: Int64): Bool
builtin equal(left: Int32, right: Int32): Bool
builtin equal(left: Int8, right: Int8): Bool
builtin equal(left: Bool, right: Bool): Bool

builtin notEqual(left: Float64, right: Float64): Bool
builtin notEqual(left: Int64, right: Int64): Bool
builtin notEqual(left: Int32, right: Int32): Bool
builtin notEqual(left: Int8, right: Int8): Bool

builtin less(left: Float64, right: Float64): Bool
builtin less(left: Int64, right: Int64): Bool
builtin less(left: Int32, right: Int32): Bool
builtin less(left: Int8, right: Int8): Bool

builtin lessEqual(left: Float64, right: Float64): Bool
builtin lessEqual(left: Int64, right: Int64): Bool
builtin lessEqual(left: Int32, right: Int32): Bool
builtin lessEqual(left: Int8, right: Int8): Bool

builtin greater(left: Float64, right: Float64): Bool
builtin greater(left: Int64, right: Int64): Bool
builtin greater(left: Int32, right: Int32): Bool
builtin greater(left: Int8, right: Int8): Bool

builtin greaterEqual(left: Float64, right: Float64): Bool
builtin greaterEqual(left: Int64, right: Int64): Bool
builtin greaterEqual(left: Int32, right: Int32): Bool
builtin greaterEqual(left: Int8, right: Int8): Bool

builtin add(left: Float64, right: Float64): Float64
builtin add(left: Int64, right: Int64): Int64
builtin add(left: Int32, right: Int32): Int32
builtin add(left: Int8, right: Int8): Int8

builtin subtract(left: Float64, right: Float64): Float64
builtin subtract(left: Int64, right: Int64): Int64
builtin subtract(left: Int32, right: Int32): Int32
builtin subtract(left: Int8, right: Int8): Int8

builtin negate(operand: Float64): Float64
builtin negate(operand: Int64): Int64
builtin negate(operand: Int32): Int32
builtin negate(operand: Int8): Int8

builtin multiply(left: Float64, right: Float64): Float64
builtin multiply(left: Int64, right: Int64): Int64
builtin multiply(left: Int32, right: Int32): Int32
builtin multiply(left: Int8, right: Int8): Int8

builtin divide(left: Float64, right: Float64): Float64
builtin divide(left: Int64, right: Int64): Int64
builtin divide(left: Int32, right: Int32): Int32
builtin divide(left: Int8, right: Int8): Int8

builtin modulo(left: Float64, right: Float64): Float64
builtin modulo(left: Int64, right: Int64): Int64
builtin modulo(left: Int32, right: Int32): Int32
builtin modulo(left: Int8, right: Int8): Int8

builtin not(boolean: Bool): Bool
builtin and(left: Bool, right: Bool): Bool
builtin or(left: Bool, right: Bool): Bool

builtin subscript[t](array: Array[t], index: Int64): t
builtin subscript_mut[t](mut array: Array[t], index: Int64): mut t
builtin size[t](array: Array[t]): Int64

interface printWithoutLineEnding[t](object: t): None

extern printf(format: String, ...): Int32

function print[t](value: t): None
    printWithoutLineEnding(value)
    _ = printf("\n")

function printWithoutLineEnding(value: Float64): None
    _ = printf("%g", value)

function printWithoutLineEnding(value: Int64): None
    _ = printf("%d", value)

function printWithoutLineEnding(value: Int32): None
    _ = printf("%d", value)

function printWithoutLineEnding(value: Int8): None
    _ = printf("%d", value)

function printWithoutLineEnding(value: Bool): None
    if value _ = printf("true")
    else     _ = printf("false")

function printWithoutLineEnding(value: String): None
    _ = printf(value)

function printWithoutLineEnding[t](value: Array[t]): None
    _ = printf("[")
    i = 1
    while i <= size(value)
        printWithoutLineEnding(i)
        if not i == size(value)
            _ = printf(", ")
        i := i + 1
    _ = printf("]")

function printWithoutLineEnding[t: type](struct: t): None
    printStruct(struct)

builtin printStruct[t: type](struct: t): None